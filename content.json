{"meta":{"title":"雨宿り","subtitle":"无论外边有着怎样的暴雨，在这里你便不会被","description":"什么地方1","author":"夜中的兔子","url":""},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-05-06T08:12:44.581Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-05-08T03:31:58.630Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘の幽奈さん] 与&nbsp; Rain&nbsp; （ 雨宿り ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-05-08T08:46:55.525Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"美しい言葉 获取中……","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-05-08T14:19:50.583Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-05-06T08:12:44.765Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-05-06T08:12:44.519Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-05-08T11:36:24.586Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2020-05-09T13:32:05.000Z","updated":"2020-05-10T04:32:30.658Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-05-10T09:22:09.846Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":"d"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-05-06T08:12:44.938Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-05-06T08:12:45.055Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-05-06T08:12:45.129Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"伪元素清除浮动原理","slug":"clear_both","date":"2020-05-13T14:52:29.000Z","updated":"2020-05-19T15:06:53.325Z","comments":true,"path":"2020/05/13/clear_both/","link":"","permalink":"/2020/05/13/clear_both/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过度娘，我们不能得知解决浮动带来的影响方法有常见的overflow:hidden和clear:both，又或是根据BFC规则解决，而今天我要讲解的关于伪元素中使用clear:both的原理（别觉得没必要，知道总比不知道好，看一看花不了几分钟的） Clear:both清除浮动原理下面我将其分为三种状况来讲： 其中黑色部分为父元素div，红为左浮动的子div，蓝则为给父元素div添加的伪元素，此时他的内容是”:after伪元素”在这里能明显看见，因为子元素浮动无法撑开盒子，所以我们这时给伪元素加上clear:both属性 clear属性的作用是清除浮动对自己带来的影响，也就是对现在的蓝div来说红div并非处于浮动状态，自然而然它就会被挤到红色的div下面，从而导致黑div被蓝div撑开 最后，只要把蓝div的内容设为空就行了（虽然没内容但还是会被挤下去，黑依旧会被撑开，而因为蓝没内容也不会被额外撑开）。还有，若要更优化可以加上visibility:hidden,使蓝div彻底不可见 PS：可能存在一些看似废话的话，但这里尽可能详细，让任何人都看得懂（高手也不会来这种地方吧）","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"答疑","slug":"答疑","permalink":"/tags/答疑/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"从零开始学画画","slug":"drawing","date":"2020-05-10T04:31:57.000Z","updated":"2020-05-19T15:07:00.508Z","comments":true,"path":"2020/05/10/drawing/","link":"","permalink":"/2020/05/10/drawing/","excerpt":"","text":"2020-05-10 15:06:22开始持续更新…… 首先附上目前水平","categories":[{"name":"成长","slug":"成长","permalink":"/categories/成长/"}],"tags":[{"name":"日常","slug":"日常","permalink":"/tags/日常/"}],"keywords":[{"name":"成长","slug":"成长","permalink":"/categories/成长/"}]},{"title":"前端高级学习笔记","slug":"grow-note","date":"2020-05-10T04:31:57.000Z","updated":"2020-11-24T03:53:29.724Z","comments":true,"path":"2020/05/10/grow-note/","link":"","permalink":"/2020/05/10/grow-note/","excerpt":"","text":"在复习的过程中，发觉的一些会不解的点 持续更新中….. JavascriptClass类构造方法construtor() 在类中的构造方法是唯一的，不允许存在多个 constructor是类的默认方法，创建类的实例对象时被调用 当没有指定时会自动添加默认的constructor方法 在构造方法中，可以使用super关键字调用继承的父类构造方法 get/set方法 set在类实例化时被调用，get在调用对应类属性的时候被调用 getter和setter必须同级出现，但并不要求同时出现 补充：关于set/get和getter/setter的个人理解，set和get实际上是一个属性，你能调用它，但他们本身不具有功能，它们的执行大致是当你调用set/get属性时会再去调用各自对应的隐蔽函数，也就是setter/getter Node.js基础知识异步编程Node.js是单线程的异步编程，若出现异常会作为回调函数的第一个参数返回 中间件 中间件是一种功能的封装 nodejs中有许多包装好的第三方中间件模块，当需要时需先下载再调用 中间件可以执行任何函代码 程序内自己写的中间件必须有4个函数(err,req,res,next) 中间件在执行后，如果想再继续执行下(另)一个中间件，那么当前中间件不能由响应，并调用next()传给下一个中间件 中间件的第一个参数也可以是路径，忽略时则一一对应全部匹配 express中间件 express.static()函数可以设置静态资源目录，多次调用则多个目录 express.static调用后访问时不包括括号内的内容，例：public文件夹下有个img文件夹，调用app.use(express.static(‘pulibc’))后想访问img文件夹下的内容应当这样http://localhost:8080/img/文件1.jpg Less基础知识Less是css的一种预编译语言（新版还有sass），扩展了css语言，使其能够使用变量、函数等。Less运行在node或浏览器端，能够帮助我们更灵活运用css，但、场景只适合在需要代码更新情况多和代码量大的情况，其余情况不建议使用。(以下教程采于官方) 变量 @width: 1px; @height: @width+10px #header{ width:@width; height: @height; } &lt;!--编译后为css--!&gt; #header{ width: 1px; height: 11px; } 简单来讲，就是可以遍你需要的值存入变量（跟js的变量一样）需要时调用它即可，并且这些变量是能直接用来计算，把他们当做普通的变量就行，不过要记住加上@表示是变量 混合混合又可以说是包含，比方说有A和B两个空间，嵌套就是让A包含B或B包含A .a{ width: 1px; } .b{ height: 10px; .a(); } &lt;!--编译后--!&gt; .a{ width: 1px;c } .b{ height: 10px; width: 1px; } 注意在使用混合的时候，要在被包含的‘名’后面加上括号（） 嵌套嵌套通俗一点来讲就是模仿html实现了层叠功能，具体如下 .a{ width: 1px; .b{ height: 10px; } .c{ height: 20px; .d{ height: 30px; } } } &lt;!--编译后--!&gt; .a { width: 1px; } .a .b { height: 10px; } .a .c { height: 20px; } .a .c .d { height: 30px; } 还有一种，与伪选择器配用。新知识：&amp;表示当前选择器的父级 .a{ width:1px; height:10px; &amp;::after{ } } &lt;!--编译后--!&gt; .a{ width:1px; height:10px; } .a::after{ } @规则下的嵌套和冒泡@规则下的嵌套，意思其实是说跟上面的选择器采用一样的嵌套方式，但相比之下他多了个冒泡规则冒泡规则，意思是说@的标识会被放到嵌套的最上层，其他的相对不变 .a{ width: 1px; @media(min-width: 768px){ width: 10px; @media(min-resolution: 192dpi){ width: 20px; } } } &lt;!--编译后--!&gt; .a { width: 1px; } @media (min-width: 768px) { .a { width: 10px; } } @media (min-width: 768px) and (min-resolution: 192dpi) { .a { width: 20px; } } 另语：就是每在里面多写一个就算一个层叠，并且不只是层叠的部分，没层叠前的也会被编译出来 运算前面变量时也讲过，less的变量是可以进行计算，不过这计算也是有一定规则的。规则：运算符+、-、*、/ 这四个可以用来计算，取得结果构以最左侧的单位类型为准。当单位换算无效时，结果会忽略单位(没遇到过，所以不是很清楚)。 @a: 5cm + 10mm; //10mm=1cm,所以结果为6cm(以最左侧单位为准) @b: 2-3cm-5mm; // 没有单位的，在进行计算时就同与他计算的单位一样，所以这里是2cm-3cm-0.5cm=-1.5cm（如果最左侧没单位，那么就以从左到右第一个有单位的为准） @c: 2+5px-3cm; //同上 @d: 5%; @e: @d*2; //10% @f: @d+@e; //15% .a{ width: @a; } .b{ width: @b; } .c{ width: @c; } .d{ width: @d; } .e{ width: @e; } .f{ width: @f; } &lt;!--编译后--!&gt; .a { width: 6cm; } .b { width: -1.5cm; } .c { width: -106.38582677px; } .d { width: 5%; } .e { width: 10%; } .f { width: 15%; } 进行加减法时，操作数会统一转换成左侧第一个的单位，而进行乘除法时操作数是不会进行转换的（会直接基数相乘除后结果补上做左侧单位），原因是乘除法大多情况是没有意义的，结果得到的是区域，而css不支持指定区域 @a: 2cm * 3mm; //得到的是6cm，而非3cm 同样的，也可以对颜色进行计算（像是#224488/2得到的就是#112244)。不仅如此，less有针对颜色的色彩函数，这里就不一一列出。 calc()特例calc函数是为了与css兼容，不对里面的内容进行计算。但、针对嵌套函数内变量的内容则会进行计算 @a: 50vh/2; width: calc(50vh+@a) //这里会对@a里面进行计算，但不对之外的整个内容进行计算，所以得到的是calc(50vh+25vh) css自带的calc，写在里面的其实就相当于less的变量运算，意思是一样的，不过是多套一层 转义在less3.5以前，我们可以使用任意字符串作为变量的属性或值（也就是任意字符串都原样输出的意思）。在less3.5以后，这个转移其实没必要单独列出了，效果跟3.5前一样，但不需要再来~“”或~’’引号来转义是字符串。就是说，变量后面能给任意字符，且不用加引号 @a: (min-width:768px); .b{ @media @a{ width: 1px; } } &lt;!--编译后--!&gt; @media (min-width: 768px) { .b { width: 1px; } } 函数less有许多的内置函数，用来转换颜色、处理字符串、算法运算符等。由于less的内置函数有很多，这里不一一列出，后续有空会写上。@width @a: 0.5; .b{ width: percentage(@a) //结果为50%,percentage就是进行百分率转换 } 命名空间和访问符简单就是为了方便重用和分发，对变量和混合进行分组，至于访问符就是’组名.（）’ .a(){ .a1{ width: 1px; &amp;:hover{ // 这里的&amp;指的是选择器的父级，又或说是当前所在选择器 width:10px; } } } //将a组混合到某一选择器下: .b{ height: 10px; .a.a1(); } &lt;!--编译后--!&gt; .b { height: 10px; width: 1px; } .b:hover { width: 10px; } 简单理解，这里的分组其实就像于封装成了一个函数，这样就很好理解了。 映射less3.5后，我们可以将混合和规则集作为映射使用（其实就跟上面的命名空间差不多，理由组名+[]访问他的属性（内容） .a(){ value1: 1px; value2: 10px; } .a{ width: .a[value1]; height: .a[value2]; } &lt;!--编译后--!&gt; .a{ width: 1px; height: 10px; } 作用域less的作用域同css的作用域相似，先查找本地变量和混合，如果找不到则从父级作用域继承 @a: 1px; .a{ @a: 10px; .b{ width: @a; //从内（本地）向外查找，先查到的10px } } &lt;!--编译后--!&gt; .a .b { width: 10px; } //还有同css一样，变量和混合不用再引用前先定义。 .a{ @a: 10px; .b{ width: @a; //从内（本地）向外查找，先查到的10px } } @a: 1px; //像这样编译后结果也是一样的 注释同css是一样的，有行注释和块注释，具体如下： /* 这里面 全部给 注释了 */ // 这一行， 给注释了 导入这个跟我们在html引入css或js文件是一样，用import引入某个(a.)less文件，接着你就能在这里面使用某个(a.)less文件里面的所有变量 扩展它的作用是将选择器与它所引用的匹配选择器合并在一起。 nav ul { &amp;:extend(.inline); background: blue; } .inline { color: red; } &lt;!--编译后--!&gt; nav ul { background: blue; } .inline,nav ul { color: red; } 这里的合并不是舍去inline，而是让nav ul也拥有inline的内容。 Vue以下内容，请先明白什么vue再来观看 vue-router顾名思义，这是vue一种设置路由的方式，接下来将会用一段vue代码对其详细讲解： import Vue from &#39;vue&#39; //Es6特性，使用import导入类，这种方法一般用在npm i vue 之后 import App from &#39;./components/app.vue&#39; //引入主vue组件 import VueRouter from &#39;vue-router&#39; //引入vue-router模块 Vue.use(VueRouter) //搞事Vue你使用的路由模式 import a from &#39;./components/a.vue&#39; //引入外部vue文件，后面会细说 const router = new VueRouter({ //实例化模块，用常量router存储 mode:&#39;history&#39; //设置路由为我们常见的标准模式xxx.xxx.xxx/路由 mode:&#39;hash&#39; //当我们没设模式时，hash便是我们的默认模式，它以#来表示路由的开始,如：xxx.xxx.xxx/#/a base:&#39;a&#39; //base是将某一文件夹设置为根目录或说是基路径，比方说这里访问xxx.xxx.xxx/a和xxx.xxx.xxx效果是一样 routes:[ // 设置路由规则,因为路由通常负数所以加+，并且它是个数组 {name:a,path:&#39;/a&#39;,component:a}, //一条路由是一条对象，name是给这条路由取得名字，path是设置这条路由的路径（列如这里就是xxx.xxx.xxx/a）,component表示访问这里路由时使用的组件 ] }) new Vue({ el:&#39;#el&#39;, //项目的隔页面下的id，这里不傲述 router, //这是一种简写，实际这里是router:router，表示将路径设置成了const内的内容（这里简写只适用于同名的情况） mounted(){ //挂载后的操作 router.push(&#39;/a&#39;) //可以使用这种方法，在vue项目启动后自动跳转到路由a }, render:c=&gt;c(App) }) 安装方法 引入CDN发布的代码 &lt;script src=&#39;http://unpkg.com/vue-router&#39;&gt;&lt;/script&gt; npm安装模块 npm i vue-router --save 使用vue安装 vue add router 引入安装在本地的vue.js &lt;script src=&#39;./js/vue.min.js&#39;&gt;&lt;/script&gt; //vue.min.js是vue框架打包好的文件，所以里面是包含了vue-router功能的 组件传递参数propsprops的作用是父组件向子组件传递参数，具体如下： &lt;div&gt; &lt;router-link to=&#39;/a/123&#39;&gt;获取aValue&lt;/router-link&gt; //通过点击访问连接，aValue值便是123 &lt;/div&gt; const a ={ template: &#39;&lt;div&gt;{{aValue}}&lt;/div&gt;&#39; props:[&#39;aValue&#39;] // 用来获取数据的变量名 } const router = new VueRouter({ mode:&#39;history&#39;, routes:[ {path:&#39;/a/:value&#39;,component:a,props:true} //props设定为true表现开启，为false时模板是无法接受父组件传递的数据 ] }) 考点route和router route表示当前路由，他的属性有：path（路径）、params（参数）、query（参数）、hash（获取不带有#的路径）、fullPath（获取完整的路径）、matched（数组）、name（当前路径名）、meta（路由原信息） router表示表现的全局路由的实例，它的实例方法有：push、go、replace params和query params可以完全隐藏参数，参数显示更短，是安全性更高的一种参数方式，缺点是重新页面时参数会消失 query不会隐藏参数，参数显示更长，安全性普通，优点啥也没刷新参数不会消失 导航守卫（进阶）简单一点说，这就是一个在路由跳转前的一个验证。 全局守卫 const router = new VueRouter({}) router.beforeEach((to,from,next)=&gt;{ //to表示路由跳转往的路由对象，from表示导航正要离开的路由，next是一个函数，我们需要用它来resolve这个钩子 }) 下面给出一个验证登录的简化例子 import Vue from &#39;vue&#39; import App from &#39;./components/app.vue&#39; import VueRouter from &#39;vue-router&#39; Vue.use(VueRouter) const login = { template:`&lt;div style=&quot;background-color: yellow&quot;&gt;登录页 &lt;br&gt;姓名：XXX&lt;br&gt;&lt;/div&gt;` } const profile = { template:`&lt;div style=&quot;background-color: yellow&quot;&gt;简介: &lt;br&gt;姓名：XXX&lt;br&gt;&lt;/div&gt;` } const scores={ template:`&lt;div style=&quot;background-color: red&quot;&gt;js: &lt;br&gt;500分：XXX&lt;br&gt;&lt;/div&gt;` } const router= new VueRouter({ routes:[ {name:&#39;login&#39;,path:&#39;/login&#39;,component:login}, {name:&#39;profile&#39;,path:&#39;/student/:sid/profile&#39;,component:profile}, {name:&#39;scores&#39;,path:&#39;/student/:sid/scores&#39;,component:scores}, ] }) router.beforeEach((to,from,next)=&gt;{ const nextRoute=[&#39;profile&#39;,&#39;scores&#39;] let isLogin = false; if (nextRoute.indexOf(to.name)&gt;=0){ if (!isLogin){ console.log(&#39;没有登录&#39;) router.push({name:login}) } if (to.name==&#39;login&#39;){ if (isLogin){ router.push({name:&#39;home&#39;}) } } } next(); }) new Vue({ el:&#39;#el&#39;, router, mounted(){ router.push(&#39;/student/123/profile&#39;) }, render:c=&gt;c(App) }) 全局解析守卫router.beforeResolve（2.5新增，不明白）这个跟全局守卫不同的是，它在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫才被调用 全局后置钩子router.afterEach((to,from)=&gt;{})这个跟守卫不同，不会接受next函数也不改变导航本身 路由独享守卫这个守卫是属于直接设在指定路由中，使用方法同全局前置守卫一样 const router = new VueRouter({ routes:[ { path: &#39;/a&#39;, component: a, beforeEnter:(to,from,next)=&gt;{ } } ] }) 组件内的守卫顾名思义，是在组件内定义的路由导航卫士，分别有beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave beforeRouteEnter(to,from,next){} //在渲染该组件的路由被confirm前调用，不能获取this实例，因为组件实例还没被创建 beforeRouteUpdate(to,from,next){} //在当前路由发生改变，但该组件被服用时使用。意思说访问两次一样的路径渲染的组件是同一个。 beforeRouteLeave(to,from,next){} //当导航离开该组件的对应路由时调用 补充知识 在vue初始化项目时有两个运行环境配置版本，分别是Compiler和Runtime。 两者的区别是Compiler支持template模板内容进行编译，而Runtime版本不支持，他是在加载.vue文件时，webpack打包过程会将进行渲染，所以在runtime版本用template模板内容进行编译会报错：[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available解决方法：在配置文件(vue.config.js)中加入支持，写法为 //方法一 module.exports={ resolve:{ alias:{ &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39; } } } //方法二 直接在配置文件夹中加入即可 module.exports={ runtimeCompiler:true } ps:以上方法是针对vue3.x的，2.x的这里就暂时不写 单页面组件单页面组件，这便跟上面讲到的.vue文件有关联。原本，我们会直接在文件中写上template模板进行调用，而单页面组件就是一个完全独立的文件在外（类似php的局部无刷新更新页面那样的单独文件存在）言简意赅，单页面组件就是一个独立于主页面外的.vue文件，也就是我们常见的组件封装，使用时直接引入主页面便可（当然，还需要设置一下模板） 考点 使用单页面组件的优点有：完整的语法高亮、CommonJS模块化、组件化的CSS 使用单页面组件需要使用webpack或browserify等构建工具。可以用预处理器来构建简洁和功能丰富的组件，如pug、babel、stylus等。 每个.vue文件用三大部分语言快组成，&lt;template&gt;、&lt;script&gt;、&lt;style&gt; 每个.vue文件最多包含一个&lt;script&gt;和一个&lt;template&gt;。&lt;template&gt;的内容会被提取到vue-template-compiler为字符串，预处理为JavaScript渲染函数，最终注入&lt;script&gt;通过export default导出到组件中。 每个.vue文件都可包含多个&lt;style&gt;标签。&lt;style&gt;的属性有scoped或module会将样式封装在当前组件中，而不影响到其他组件。 在非单页面中，像是页面导航和分类加载数据位于不同页面，需要频繁向服务器发送请求 在单页面中，只需要第一次加载页面向服务器请求获取数据，后续操作又js和ajx执行，并借助ajax的json提取数据，与resultFul api相关联，从而大幅度减少服务器的压力，提示用户体验。总的来说，单页面应用就是为用户提供了更接近本地移动或桌面的应用程序体验 官方推荐使用vue-router实现单页面程序 单页面应用的优点：用户体验好，内容的改动不会重新加载整个页面。执行效率高、减少服务器压力。 单页面应用的缺点：不利于搜索引擎的优化，不利于浏览器书签的搜藏 &lt;template&gt; &lt;div&gt;&lt;/div&gt; //模板内的根div只能有一个，组件的内容写在这个div下面 &lt;/template&gt; &lt;script&gt; export default{ } &lt;/script&gt; &lt;style scoped&gt;&lt;/style&gt; 上面是一个.vue组件的标准模板 Vuexvuex的讲解，果然还是推荐这个网址https://www.cnblogs.com/ichenchao/articles/11578085.html，还有https://www.cnblogs.com/pangguoming/p/11236387.html 数据库连接方法总结php mysqli_connect() new mysqli() new PDO()转自…..下次补上 &lt;?php //第一种,mysqli(面向过程） $con = mysqli_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;yinghua&#39;,&#39;book&#39;); if(mysqli_connect_errno($con)){ die(mysqli_connect_error()); } mysqli_query($con,&#39;set names utf8&#39;); $sql = &#39;select * from books&#39;; $query = mysqli_query($con,$sql); while($row=mysqli_fetch_assoc($query)){ var_dump($row[&#39;BookName&#39;]); } mysqli_close($con); //第二种mysqli(面向对象) //连接数据库方式1 $con = new mysqli(&#39;localhost&#39;,&#39;root&#39;,&#39;yinghua&#39;,&#39;book&#39;); //连接数据库方式2 //$con = new mysqli(); //$con-&gt;connect(&#39;localhost&#39;,&#39;root&#39;,&#39;yinghua&#39;,&#39;book&#39;); if($con-&gt;connect_errno){ printf($con-&gt;connect_error); exit(); } $sql = &quot;select * from books&quot;; $query = $con-&gt;query($sql); while($row = $query-&gt;fetch_array()){ echo $row[&#39;BookName&#39;]; } $query-&gt;free_result(); $con-&gt;close(); //第三种PDO连接数据库 echo &#39;&lt;br/&gt;&#39;; $db = new PDO(&#39;mysql:host=localhost;dbname=book&#39;,&#39;root&#39;,&#39;yinghua&#39;); try{ foreach ($db-&gt;query(&#39;select * from books&#39;) as $row) { print_r($row[&#39;BookName&#39;]); } $db =null; }catch(PDOException $e){ echo $e-&gt;getMessage(); } //总结，关闭mysql数据库的链接方式 //mysql_close($con); //mysqli_close($con); //$con-&gt;close(); //$conn =null; node mysql.createConnection() mysql.createPool(),pool.getConnection()`node//第一种，普通的创建连接const mysql = require(‘mysql’)const connection = mysql.createConnection({ host:’localhost’, port:’3306’, database:’book’, user:’root’, password:’yinghua’})connection.connect();connection.query(‘select * from books’,(error,rows,field)=&gt;{ if (error){ throw error; } console.log(rows)});connection.end(); // 第二种，连接池，需要多次执行数据库操作时更省服务器内容const mysql =require(‘mysql’)const pool = mysql.createPool({ host:’localhost’, port:’3306’, database:’book’, user:’root’, password:’yinghua’, // connectionLimit:5 限制连接池大小}) pool.getConnection((error,conn)=&gt;{ if (error){ throw error; // return; // console.log(‘从来连接池获取连接失败’) } conn.config.queryFormat = (query,values)=&gt;{ if(!values) return sql; else{ return sql.replace(/\\:(\\w+)/g,(txt,key)=&gt;{ if(values.hasOwnProperty(key)){ return values[key]; } return txt; }) } } conn.query(‘select * from books’,’’,(error,results)=&gt;{ if (error){ throw error } console.log(‘执行成功’) console.log(results); 35 //释放连接 conn.release(); });}) //总结，关闭mysql数据库的链接方式//connection.end();//conn.release();释放连接`","categories":[{"name":"成长","slug":"成长","permalink":"/categories/成长/"}],"tags":[{"name":"日常","slug":"日常","permalink":"/tags/日常/"}],"keywords":[{"name":"成长","slug":"成长","permalink":"/categories/成长/"}]},{"title":"欢迎来到我的个人Blog","slug":"Welcome","date":"2020-05-06T14:21:53.000Z","updated":"2020-05-19T15:07:28.441Z","comments":true,"path":"2020/05/06/Welcome/","link":"","permalink":"/2020/05/06/Welcome/","excerpt":"","text":"Hi，欢迎你！这是我第一次做个人博客，也就是萌新一枚的意思在这里我会经常分享一些有用的专业知识，希望能对来访的你起到帮助（由于本人偏爱二次元，所以也可能反而是二次元偏多） 语末：搭建个人博客前查阅的许多模板，最终决定这个是因为某位大佬（名字百度会出现怪东西就不加上了）的推荐，同时也感谢hojun大佬提供的模板（用之前：我要自己写！用之后：爽到！） 哦对了，最后还有这张图！","categories":[{"name":"成长","slug":"成长","permalink":"/categories/成长/"}],"tags":[],"keywords":[{"name":"成长","slug":"成长","permalink":"/categories/成长/"}]},{"title":"书籍库","slug":"reading","date":"2020-05-06T14:21:53.000Z","updated":"2020-05-19T15:07:23.388Z","comments":true,"path":"2020/05/06/reading/","link":"","permalink":"/2020/05/06/reading/","excerpt":"","text":"暂无，持续更新中……","categories":[],"tags":[{"name":"阅读","slug":"阅读","permalink":"/tags/阅读/"}],"keywords":[]},{"title":"精美图库","slug":"photo","date":"2020-05-06T14:21:53.000Z","updated":"2020-05-19T15:07:18.481Z","comments":true,"path":"2020/05/06/photo/","link":"","permalink":"/2020/05/06/photo/","excerpt":"","text":"暂无，持续更新中……","categories":[],"tags":[{"name":"图库","slug":"图库","permalink":"/tags/图库/"}],"keywords":[]}]}